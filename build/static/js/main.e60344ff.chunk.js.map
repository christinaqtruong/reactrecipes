{"version":3,"sources":["results.js","searchForm.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["Results","title","calories","image","ingredients","Card","className","style","width","Img","variant","src","alt","Body","Title","Text","toFixed","toString","replace","length","map","ingredient","text","Button","SearchForm","useState","recipes","setRecipes","search","setSearch","query","setQuery","createContext","useEffect","getRecipes","a","fetch","response","json","data","hits","Container","Row","Col","lg","Form","onSubmit","e","preventDefault","Group","controlId","class","type","value","onChange","target","placeholder","recipe","key","label","Nav","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kSAuBeA,G,KAnBC,SAAC,GAA2C,IAA1CC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,YACtC,OACI,kBAACC,EAAA,EAAD,CAAMC,UAAU,MAAMC,MAAO,CAAEC,MAAO,UAClC,kBAACH,EAAA,EAAKI,IAAN,CAAUC,QAAQ,MAAMC,IAAKR,EAAOS,IAAKX,IACzC,kBAACI,EAAA,EAAKQ,KAAN,KACA,kBAACR,EAAA,EAAKS,MAAN,KAAab,GACb,kBAACI,EAAA,EAAKU,KAAN,KACI,wCAAcb,EAASc,QAAQ,GAAGC,WAAWC,QAAQ,wBAAyB,MAC9E,qDAA2Bd,EAAYe,QACvC,4BACKf,EAAYgB,KAAI,SAAAC,GAAU,OAAG,4BAAKA,EAAWC,WAGtD,kBAACC,EAAA,EAAD,CAAQb,QAAQ,WAAhB,c,gCC4CGc,MAxDf,WACE,IADmB,EAGWC,mBAAS,IAHpB,mBAGZC,EAHY,KAGHC,EAHG,OAISF,mBAAS,IAJlB,mBAIZG,EAJY,KAIJC,EAJI,OAKOJ,mBAAS,WALhB,mBAKZK,EALY,KAKLC,EALK,KAMGC,0BAEtBC,qBAAU,WACRC,MAEC,CAACJ,IAEJ,IAAMI,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OACSN,EADT,mBAbf,WAae,oBAZd,qCAWG,cACXO,EADW,gBAIEA,EAASC,OAJX,OAIXC,EAJW,OAKjBZ,EAAWY,EAAKC,MALC,2CAAH,qDAkBhB,OACE,kBAACC,EAAA,EAAD,CAAWnC,UAAU,eACnB,kBAACoC,EAAA,EAAD,CAAKpC,UAAU,0BACb,kBAACqC,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACC,EAAA,EAAD,CAAMC,SAVM,SAAAC,GAClBA,EAAEC,iBACFjB,EAASH,GACTC,EAAU,MAQF,kBAACgB,EAAA,EAAKI,MAAN,CAAYC,UAAU,kBACpB,yBAAKC,MAAM,eACP,2BAAOA,MAAM,eAAeC,KAAK,OAAOC,MAAOzB,EAAQ0B,SAjBlD,SAAAP,GACnBlB,EAAUkB,EAAEQ,OAAOF,QAgB0EG,YAAY,kBAC3F,4BAAQL,MAAM,mBAAd,eAMZ,kBAACT,EAAA,EAAD,KACE,yBAAKS,MAAM,2CACRzB,EAAQN,KAAI,SAAAqC,GAAM,OACjB,kBAAC,EAAD,CAASC,IAAKD,EAAOA,OAAOE,MAAO1D,MAAOwD,EAAOA,OAAOE,MAAOzD,SAAUuD,EAAOA,OAAOvD,SAAUC,MAAOsD,EAAOA,OAAOtD,MAAOC,YAAaqD,EAAOA,OAAOrD,qB,MC5CrJwD,MANf,WACI,OACI,8CCmBOC,MAjBf,WAEE,OACE,kBAACpB,EAAA,EAAD,CAAWnC,UAAU,OAEjB,kBAACoC,EAAA,EAAD,KACE,kBAAC,EAAD,OAGF,kBAACA,EAAA,EAAD,KACE,kBAAC,EAAD,SCLUoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e60344ff.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Card, Button} from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nconst Results = ({title, calories, image, ingredients}) => {\r\n    return(\r\n        <Card className=\"m-3\" style={{ width: '18rem' }}>\r\n            <Card.Img variant=\"top\" src={image} alt={title}/>\r\n            <Card.Body>\r\n            <Card.Title>{title}</Card.Title>\r\n            <Card.Text>\r\n                <p>Calories: {calories.toFixed(0).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</p>\r\n                <p>Number of Ingredients: {ingredients.length}</p>\r\n                <ul>\r\n                    {ingredients.map(ingredient=> <li>{ingredient.text}</li>)}\r\n                </ul>\r\n            </Card.Text>\r\n            <Button variant=\"primary\">Recipe</Button>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default Results;","import React, {useEffect, useState, createContext} from \"react\";\r\nimport Results from \"./results\";\r\nimport {Container, Row, Form, Col} from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nfunction SearchForm(){\r\n  const APP_ID = \"d377543c\";\r\n  const APP_KEY = \"1f354455a9fe274bee4c45df3a774b24\"\r\n  const [recipes, setRecipes] = useState([]);\r\n  const [search, setSearch] = useState('');\r\n  const [query, setQuery] = useState('chicken');\r\n  const RecipeContext = createContext();\r\n\r\n  useEffect(()=>{\r\n    getRecipes();\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [query]);\r\n\r\n  const getRecipes = async () =>{\r\n    const response = await fetch(\r\n      `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\r\n    );\r\n    const data = await response.json();\r\n    setRecipes(data.hits);\r\n  }\r\n\r\n  const updateSearch = e => {\r\n    setSearch(e.target.value);\r\n  }\r\n\r\n  const searchQuery = e => {\r\n    e.preventDefault();\r\n    setQuery(search);\r\n    setSearch('');\r\n  }\r\n\r\n  return(\r\n    <Container className=\"search-form\">\r\n      <Row className=\"justify-content-center\">\r\n        <Col lg={6}>\r\n          <Form onSubmit={searchQuery}> \r\n            <Form.Group controlId=\"formBasicEmail\">\r\n              <div class=\"d-flex mt-3\">\r\n                  <input class=\"form-control\" type=\"text\" value={search} onChange={updateSearch} placeholder=\"Search Recipe\"></input>\r\n                  <button class=\"btn btn-primary\">Search</button>\r\n              </div>\r\n            </Form.Group>\r\n          </Form>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <div class=\"d-flex flex-wrap justify-content-center\">\r\n          {recipes.map(recipe=>(\r\n            <Results key={recipe.recipe.label} title={recipe.recipe.label} calories={recipe.recipe.calories} image={recipe.recipe.image} ingredients={recipe.recipe.ingredients}/>\r\n          ))}\r\n        </div>\r\n      </Row>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default SearchForm;","import React from 'react';\r\nimport './App.css';\r\n\r\nfunction Nav(){\r\n    return (\r\n        <h3>React Recipes</h3>\r\n    );\r\n}\r\n\r\nexport default Nav;","import React from \"react\";\r\nimport SearchForm from \"./searchForm\";\r\nimport {Container, Row} from 'react-bootstrap';\r\n// import {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\r\nimport Nav from './Nav';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nfunction App(){\r\n\r\n  return(\r\n    <Container className=\"App\">\r\n      {/* <Router> */}\r\n        <Row>\r\n          <Nav/>\r\n          {/* <Route path=\"/search\" component={SearchForm}/> */}\r\n        </Row>\r\n        <Row>\r\n          <SearchForm/>\r\n        </Row>\r\n      {/* </Router> */}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}